// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ユーザー
model User {
  id         String      @id @default(cuid()) @db.VarChar(30)
  /// ログイン用のClerkのID
  clerkId    String      @unique
  name       String      @db.VarChar(32)
  myRecipes  MyRecipe[]
  followings Following[]
  favorites  Favorite[]
}

/// シェフ
model Chef {
  id           String       @id @default(cuid()) @db.VarChar(30)
  /// 表示名
  displayName  String       @db.VarChar(32)
  /// シェフの説明
  bio          String
  /// プロフィール画像
  profileImage String
  recipes      ChefRecipe[]
  followers    Following[]
  links        ChefLink[]
}

/// シェフのリンク（Twitter、Instagram、Webサイトなど）
model ChefLink {
  id            Int    @id @default(autoincrement())
  chefId        String
  chef          Chef   @relation(fields: [chefId], references: [id])
  url           String
  /// サイト名（Webページのtitleタグを入れる想定）
  siteName      String
  followerCount Int    @db.UnsignedInt
}

/// レシピ（ベーステーブル）
model Recipe {
  id          String      @id @default(cuid())
  /// レシピ名
  name        String
  /// レシピの説明
  description String      @db.VarChar(255)
  chefRecipe  ChefRecipe?
  myRecipe    MyRecipe?
  favorites   Favorite[]
}

/// シェフのレシピ
model ChefRecipe {
  recipeId String @id
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  chefId   String
  chef     Chef   @relation(fields: [chefId], references: [id])
}

/// マイレシピ
model MyRecipe {
  recipeId String @id
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

/// レシピの画像
/// レシピの作り方
/// レシピの材料
/// レシピのリンク

/// フォロー（ユーザーがシェフをフォローする）
model Following {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  chefId String
  chef   Chef   @relation(fields: [chefId], references: [id])

  @@unique(fields: [userId, chefId])
}

/// お気に入り（ユーザーがレシピをお気に入りする）
model Favorite {
  id       Int    @id @default(autoincrement())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique(fields: [userId, recipeId])
}
