// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// ユーザー
model User {
  id              String           @id @default(cuid()) @db.VarChar(30)
  name            String           @db.VarChar(32)
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  myRecipes       MyRecipe[]
  followings      Following[]
  favorites       Favorite[]
  accounts        Account[]
  myMemoItems     MyMemoItem[]
  shopListRecipes ShopListRecipe[]
}

/// OAuthのアカウント（Google、Appleなど）
model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique(fields: [provider, providerAccountId])
  @@index(fields: [userId])
}

/// シェフ
model Chef {
  id           String       @id @default(cuid()) @db.VarChar(30)
  /// 表示名
  displayName  String       @db.VarChar(32)
  /// シェフの説明
  bio          String
  /// プロフィール画像
  profileImage String
  recipes      ChefRecipe[]
  followers    Following[]
  links        ChefLink[]
}

/// シェフのリンク（Twitter、Instagram、Webサイトなど）
model ChefLink {
  id            Int    @id @default(autoincrement())
  chefId        String
  chef          Chef   @relation(fields: [chefId], references: [id])
  url           String
  /// サイト名（Webページのtitleタグを入れる想定）
  siteName      String
  /// フォロワー数（Twitter、Instagram）
  followerCount Int?   @db.UnsignedInt

  @@index([chefId])
}

/// レシピ（ベーステーブル）
model Recipe {
  id              String             @id @default(cuid())
  /// レシピ名
  name            String
  /// レシピの説明
  description     String             @db.VarChar(255)
  /// 何人分か
  yields          Int                @db.UnsignedInt
  chefRecipe      ChefRecipe?
  myRecipe        MyRecipe?
  favorites       Favorite[]
  /// レシピの画像
  images          RecipeImage[]
  /// レシピの材料
  ingredients     RecipeIngredient[]
  /// レシピの作り方
  processes       RecipeProcess[]
  /// レシピのリンク
  links           RecipeLink[]
  /// 買い物リストのレシピ
  shopListRecipes ShopListRecipe[]
}

/// シェフのレシピ
model ChefRecipe {
  recipeId String @id @db.VarChar(30)
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  chefId   String
  chef     Chef   @relation(fields: [chefId], references: [id])

  @@index([recipeId]) // 主キーにインデックスが付与されるので不要ですが、PrismaのWarningが出るため追加しました
  @@index([chefId])
}

/// マイレシピ
model MyRecipe {
  recipeId String @id @db.VarChar(30)
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@index([recipeId]) // 主キーにインデックスが付与されるので不要ですが、PrismaのWarningが出るため追加しました
  @@index([userId])
}

/// レシピの画像
model RecipeImage {
  id       Int    @id @default(autoincrement())
  /// Cloudinaryの画像ID
  imageId  String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}

/// レシピの工程
model RecipeProcess {
  id          Int     @id @default(autoincrement())
  recipeId    String  @db.VarChar(30)
  recipe      Recipe? @relation(fields: [recipeId], references: [id])
  /// 工程の順番
  order       Int     @db.UnsignedInt
  /// 工程の内容
  title       String
  /// 工程の補足
  description String

  @@index([recipeId])
}

/// レシピの材料
model RecipeIngredient {
  id          Int    @id @default(autoincrement())
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id])
  title       String
  description String

  @@index([recipeId])
}

/// レシピのリンク
model RecipeLink {
  id       Int    @id @default(autoincrement())
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  url      String

  @@index([recipeId])
}

/// フォロー（ユーザーがシェフをフォローする）
model Following {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  chefId String
  chef   Chef   @relation(fields: [chefId], references: [id])

  @@unique(fields: [userId, chefId])
  @@index([chefId])
}

/// お気に入り（ユーザーがレシピをお気に入りする）
model Favorite {
  id       Int    @id @default(autoincrement())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique(fields: [userId, recipeId])
  @@index([recipeId])
}

/// 自分メモの項目
model MyMemoItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  /// 項目の内容
  content   String
  /// チェックされているかどうか
  isChecked Boolean
  /// ソート順
  sortOrder Int     @db.UnsignedInt

  @@index([userId])
}

/// 買い物リストのレシピ
model ShopListRecipe {
  id                  String               @id @default(cuid())
  userId              String
  user                User                 @relation(fields: [userId], references: [id])
  recipeId            String
  recipe              Recipe               @relation(fields: [recipeId], references: [id])
  shopListIngredients ShopListIngredient[]

  @@index([userId])
  @@index([recipeId])
}

/// 買い物リストのレシピの材料
model ShopListIngredient {
  id                 String         @id @default(cuid())
  shopListRecipeId   String
  shopListRecipe     ShopListRecipe @relation(fields: [shopListRecipeId], references: [id])
  /// レシピの材料（RecipeIngredient）のID
  recipeIngredientId Int? // 買い物リスト画面から、レシピに登録されている材料以外も追加できるため、任意にしています
  /// 材料名
  name               String
  /// チェックされているかどうか
  isChecked          Boolean
  /// ソート順
  sortOrder          Int            @db.UnsignedInt

  @@index([shopListRecipeId])
}
